{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { tap, finalize } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngx-loading-bar/core';\nlet LoadingBarInterceptor = /*#__PURE__*/(() => {\n  let LoadingBarInterceptor = class LoadingBarInterceptor {\n    constructor(loader) {\n      this.loader = loader;\n    }\n\n    intercept(req, next) {\n      // https://github.com/angular/angular/issues/18155\n      if (req.headers.has('ignoreLoadingBar')) {\n        return next.handle(req.clone({\n          headers: req.headers.delete('ignoreLoadingBar')\n        }));\n      }\n\n      let started = false;\n      const ref = this.loader.useRef('http');\n      return next.handle(req).pipe(tap(() => {\n        if (!started) {\n          ref.start();\n          started = true;\n        }\n      }), finalize(() => started && ref.complete()));\n    }\n\n  };\n\n  LoadingBarInterceptor.ɵfac = function LoadingBarInterceptor_Factory(t) {\n    return new (t || LoadingBarInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.LoadingBarService));\n  };\n\n  LoadingBarInterceptor.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LoadingBarInterceptor,\n    factory: function (t) {\n      return LoadingBarInterceptor.ɵfac(t);\n    }\n  });\n  LoadingBarInterceptor = __decorate([__metadata(\"design:paramtypes\", [LoadingBarService])], LoadingBarInterceptor);\n  return LoadingBarInterceptor;\n})();\nlet LoadingBarHttpClientModule = /*#__PURE__*/(() => {\n  let LoadingBarHttpClientModule = class LoadingBarHttpClientModule {};\n\n  LoadingBarHttpClientModule.ɵfac = function LoadingBarHttpClientModule_Factory(t) {\n    return new (t || LoadingBarHttpClientModule)();\n  };\n\n  LoadingBarHttpClientModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LoadingBarHttpClientModule\n  });\n  LoadingBarHttpClientModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: HTTP_INTERCEPTORS,\n      useClass: LoadingBarInterceptor,\n      multi: true\n    }],\n    imports: [[HttpClientModule, LoadingBarModule], HttpClientModule, LoadingBarModule]\n  });\n  return LoadingBarHttpClientModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarHttpClientModule, {\n    imports: function () {\n      return [HttpClientModule, LoadingBarModule];\n    },\n    exports: function () {\n      return [HttpClientModule, LoadingBarModule];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LoadingBarHttpClientModule, LoadingBarInterceptor as ɵa }; //# sourceMappingURL=ngx-loading-bar-http-client.js.map","map":null,"metadata":{},"sourceType":"module"}